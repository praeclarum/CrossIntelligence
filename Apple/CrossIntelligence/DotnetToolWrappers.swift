
// This file is generated by gentools.py. Do not edit manually.
// Generated for up to 100 tools.
import Foundation
import FoundationModels

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper0: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 0 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[0] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper1: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 1 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[1] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper2: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 2 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[2] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper3: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 3 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[3] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper4: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 4 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[4] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper5: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 5 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[5] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper6: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 6 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[6] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper7: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 7 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[7] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper8: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 8 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[8] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper9: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 9 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[9] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper10: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 10 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[10] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper11: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 11 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[11] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper12: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 12 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[12] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper13: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 13 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[13] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper14: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 14 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[14] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper15: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 15 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[15] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper16: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 16 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[16] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper17: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 17 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[17] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper18: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 18 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[18] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper19: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 19 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[19] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper20: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 20 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[20] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper21: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 21 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[21] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper22: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 22 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[22] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper23: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 23 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[23] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper24: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 24 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[24] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper25: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 25 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[25] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper26: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 26 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[26] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper27: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 27 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[27] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper28: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 28 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[28] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper29: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 29 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[29] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper30: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 30 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[30] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper31: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 31 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[31] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper32: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 32 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[32] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper33: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 33 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[33] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper34: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 34 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[34] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper35: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 35 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[35] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper36: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 36 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[36] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper37: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 37 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[37] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper38: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 38 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[38] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper39: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 39 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[39] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper40: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 40 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[40] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper41: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 41 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[41] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper42: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 42 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[42] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper43: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 43 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[43] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper44: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 44 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[44] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper45: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 45 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[45] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper46: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 46 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[46] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper47: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 47 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[47] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper48: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 48 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[48] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper49: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 49 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[49] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper50: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 50 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[50] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper51: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 51 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[51] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper52: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 52 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[52] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper53: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 53 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[53] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper54: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 54 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[54] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper55: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 55 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[55] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper56: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 56 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[56] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper57: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 57 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[57] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper58: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 58 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[58] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper59: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 59 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[59] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper60: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 60 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[60] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper61: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 61 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[61] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper62: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 62 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[62] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper63: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 63 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[63] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper64: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 64 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[64] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper65: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 65 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[65] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper66: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 66 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[66] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper67: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 67 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[67] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper68: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 68 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[68] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper69: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 69 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[69] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper70: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 70 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[70] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper71: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 71 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[71] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper72: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 72 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[72] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper73: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 73 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[73] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper74: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 74 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[74] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper75: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 75 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[75] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper76: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 76 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[76] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper77: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 77 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[77] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper78: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 78 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[78] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper79: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 79 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[79] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper80: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 80 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[80] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper81: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 81 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[81] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper82: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 82 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[82] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper83: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 83 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[83] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper84: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 84 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[84] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper85: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 85 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[85] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper86: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 86 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[86] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper87: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 87 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[87] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper88: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 88 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[88] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper89: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 89 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[89] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper90: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 90 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[90] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper91: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 91 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[91] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper92: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 92 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[92] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper93: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 93 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[93] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper94: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 94 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[94] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper95: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 95 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[95] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper96: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 96 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[96] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper97: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 97 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[97] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper98: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 98 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[98] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper99: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 99 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[99] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}

fileprivate let maxTools = 100

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
var gArgsSchemas: [GenerationSchema] = Array(repeating: DefaultDotnetArgs.generationSchema, count: maxTools)

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
var gTools: [any Tool & DotnetToolWrapper] = [
    DotnetToolWrapper0(),
    DotnetToolWrapper1(),
    DotnetToolWrapper2(),
    DotnetToolWrapper3(),
    DotnetToolWrapper4(),
    DotnetToolWrapper5(),
    DotnetToolWrapper6(),
    DotnetToolWrapper7(),
    DotnetToolWrapper8(),
    DotnetToolWrapper9(),
    DotnetToolWrapper10(),
    DotnetToolWrapper11(),
    DotnetToolWrapper12(),
    DotnetToolWrapper13(),
    DotnetToolWrapper14(),
    DotnetToolWrapper15(),
    DotnetToolWrapper16(),
    DotnetToolWrapper17(),
    DotnetToolWrapper18(),
    DotnetToolWrapper19(),
    DotnetToolWrapper20(),
    DotnetToolWrapper21(),
    DotnetToolWrapper22(),
    DotnetToolWrapper23(),
    DotnetToolWrapper24(),
    DotnetToolWrapper25(),
    DotnetToolWrapper26(),
    DotnetToolWrapper27(),
    DotnetToolWrapper28(),
    DotnetToolWrapper29(),
    DotnetToolWrapper30(),
    DotnetToolWrapper31(),
    DotnetToolWrapper32(),
    DotnetToolWrapper33(),
    DotnetToolWrapper34(),
    DotnetToolWrapper35(),
    DotnetToolWrapper36(),
    DotnetToolWrapper37(),
    DotnetToolWrapper38(),
    DotnetToolWrapper39(),
    DotnetToolWrapper40(),
    DotnetToolWrapper41(),
    DotnetToolWrapper42(),
    DotnetToolWrapper43(),
    DotnetToolWrapper44(),
    DotnetToolWrapper45(),
    DotnetToolWrapper46(),
    DotnetToolWrapper47(),
    DotnetToolWrapper48(),
    DotnetToolWrapper49(),
    DotnetToolWrapper50(),
    DotnetToolWrapper51(),
    DotnetToolWrapper52(),
    DotnetToolWrapper53(),
    DotnetToolWrapper54(),
    DotnetToolWrapper55(),
    DotnetToolWrapper56(),
    DotnetToolWrapper57(),
    DotnetToolWrapper58(),
    DotnetToolWrapper59(),
    DotnetToolWrapper60(),
    DotnetToolWrapper61(),
    DotnetToolWrapper62(),
    DotnetToolWrapper63(),
    DotnetToolWrapper64(),
    DotnetToolWrapper65(),
    DotnetToolWrapper66(),
    DotnetToolWrapper67(),
    DotnetToolWrapper68(),
    DotnetToolWrapper69(),
    DotnetToolWrapper70(),
    DotnetToolWrapper71(),
    DotnetToolWrapper72(),
    DotnetToolWrapper73(),
    DotnetToolWrapper74(),
    DotnetToolWrapper75(),
    DotnetToolWrapper76(),
    DotnetToolWrapper77(),
    DotnetToolWrapper78(),
    DotnetToolWrapper79(),
    DotnetToolWrapper80(),
    DotnetToolWrapper81(),
    DotnetToolWrapper82(),
    DotnetToolWrapper83(),
    DotnetToolWrapper84(),
    DotnetToolWrapper85(),
    DotnetToolWrapper86(),
    DotnetToolWrapper87(),
    DotnetToolWrapper88(),
    DotnetToolWrapper89(),
    DotnetToolWrapper90(),
    DotnetToolWrapper91(),
    DotnetToolWrapper92(),
    DotnetToolWrapper93(),
    DotnetToolWrapper94(),
    DotnetToolWrapper95(),
    DotnetToolWrapper96(),
    DotnetToolWrapper97(),
    DotnetToolWrapper98(),
    DotnetToolWrapper99()
]
