
// This file is generated by gentools.py. Do not edit manually.
// Generated for up to 5 tools.
import Foundation
import FoundationModels

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper0: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 0 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[0] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = "{}"
        return ToolOutput(tool?.execute(argsJson) ?? "")
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper1: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 1 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[1] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = "{}"
        return ToolOutput(tool?.execute(argsJson) ?? "")
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper2: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 2 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[2] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = "{}"
        return ToolOutput(tool?.execute(argsJson) ?? "")
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper3: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 3 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[3] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = "{}"
        return ToolOutput(tool?.execute(argsJson) ?? "")
    }
}

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper4: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { 4 }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[4] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = "{}"
        return ToolOutput(tool?.execute(argsJson) ?? "")
    }
}

fileprivate let maxTools = 5

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
var gArgsSchemas: [GenerationSchema] = Array(repeating: DefaultDotnetArgs.generationSchema, count: maxTools)

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
var gTools: [any Tool & DotnetToolWrapper] = [
    DotnetToolWrapper0(),
    DotnetToolWrapper1(),
    DotnetToolWrapper2(),
    DotnetToolWrapper3(),
    DotnetToolWrapper4()
]
