import os

max_tools = 100

this_dir = os.path.dirname(os.path.abspath(__file__))
src_dir = os.path.join(this_dir, "CrossIntelligence")
out_path = os.path.join(src_dir, "DotnetToolWrappers.swift")

tool_template = """
@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
fileprivate struct DotnetToolWrapper$index$: Tool, DotnetToolWrapper {
    var tool: DotnetTool?
    var index: Int { $index$ }
    var name: String { tool?.toolName ?? "" }
    var description: String { tool?.toolDescription ?? "" }
    struct Arguments: Generable {
        let content: GeneratedContent
        static var generationSchema: GenerationSchema { gArgsSchemas[$index$] }
        var generatedContent: GeneratedContent { content }
        init(_ content: GeneratedContent) throws {
            self.content = content
        }
    }
    func call(arguments: Arguments) async throws -> ToolOutput {
        let argsJson = arguments.content.json
        guard let tool = tool else {
            throw NSError(domain: "DotnetToolWrapper", code: 0, userInfo: [NSLocalizedDescriptionKey: "Tool is not initialized"])
        }
        let result = await withCheckedContinuation { continuation in
            tool.execute(argsJson) { innerResult in
                continuation.resume(returning: innerResult as String)
            }
        }
        return ToolOutput(result)
    }
}
"""

head_template = """
// This file is generated by gentools.py. Do not edit manually.
// Generated for up to $max_tools$ tools.
import Foundation
import FoundationModels
"""

tail_template = """
fileprivate let maxTools = $max_tools$

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
var gArgsSchemas: [GenerationSchema] = Array(repeating: DefaultDotnetArgs.generationSchema, count: maxTools)

@available(iOS 26.0, macOS 26.0, macCatalyst 26.0, visionOS 26.0, *)
var gTools: [any Tool & DotnetToolWrapper] = [
"""

def write_file_template(out_file, template):
    code = template.replace("$max_tools$", str(max_tools))
    out_file.write(code)

def main():
    with open(out_path, "w") as out_file:
        write_file_template(out_file, head_template)
        for i in range(max_tools):
            tool_wrapper = tool_template.replace("$index$", str(i))
            out_file.write(tool_wrapper)
        write_file_template(out_file, tail_template)
        for i in range(max_tools):
            if i > 0:
                out_file.write(",\n")
            out_file.write(f"    DotnetToolWrapper{i}()")
        out_file.write("\n]\n")

if __name__ == "__main__":
    main()
